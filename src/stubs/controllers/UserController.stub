<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use App\User;
use App\Role;
use Validator;

class UserController extends Controller
{
    protected $userModel;
    protected $roleModel;
    protected $title;
    

    public function __construct()
    {          
        $this->userModel = new User;
        $this->title = "User";
        $this->roleModel = new Role;
        //dd(\Auth::user()->name);
        //dd(Auth::user()->id);
        // if(!$this->userModel->hasPermission('read-users')){
        //     return redirect()->route('index')->withErrors('Permission denied');
        // }
    }

    public function index()
    {
        $title = "User list";
        $users = $this->userModel->paginate(10);
        //dd($users);
        return view('user-management.index',compact('users','title'));
    }

    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function create()
    {
        $title = "User";
        return view('user-management.create',compact('title'));
    }

    /**
     * Store a newly created resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function store(Request $request)
    {
        $validator = Validator::make($request->all(), [
            'name' => 'required',
            'email' => 'required|email',
            'password' => 'required',
            'confirm_password' => 'required|same:password'
        ]);

        if($validator->fails()){
            return redirect()->back()->withErrors($validator)->withInput();
        }

        $user = $this->userModel->create([
            'name' => $request->name,
            'email' => $request->email,
            'password' => bcrypt($request->password)
        ]);

        $user->attachRole(env('DEFAULT_ROLE_USER'));

        return redirect()->back()->with('message','Success add new user <'.$request->name.'>');
        
    }

    /**
     * Display the specified resource.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function show($id)
    {
        $title = $this->title;
        $user = $this->userModel->find($id);

        
        try {
            $available_role = $this->userModel->findOrFail($id)->roles; 
        
            $roles = $this->roleModel->orderBy('display_name','asc')->get();

            return view('user-management.show',compact('title','user','roles','available_role'));        
        } catch (\Exception $e) {
            return redirect()->route('taskManagementIndex')->withErrors('Critical Error');
        }       
        
    }


    public function roleUserStore($id , Request $request)
    {
        $user = $this->userModel->find($id);

        if($user->roles->count() > 0){
            $user->detachRole($user->roles->first()->id);
        }
        
        try {
            $user->attachRole($request->role);
            return redirect()->back()->with('message','Success');
        } catch (\Exception $e) {
            return redirect()->back()->withErrors('Critical Error !');
        }
        

    }

    /**
     * Show the form for editing the specified resource.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function edit($id)
    {
        $title = $this->title;
        $user = $this->userModel->find($id);
        return view('user-management.edit',compact('title','user'));
    }

    /**
     * Update the specified resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function update(Request $request, $id)
    {
        $email = $request->email;
        $name = $request->name;

        $validator = Validator::make($request->all(),[
            'name' => 'required',
            'email' => 'email|required'
        ]);

        if($validator->fails())
        {
            return redirect()->back()-withErrors($validator);
        }
        

        if(empty($request->password))
        {
            $this->userModel->find($id)->update([
                'name' => $name,
                'email' => $email,                
            ]);
            return redirect()->back()->with('message','Success update data');
        }else{
            $this->userModel->find($id)->update([
                'name' => $name,
                'email' => $email,     
                'password' => bcrypt($request->password)
            ]);
            return redirect()->back()->with('message','Success update data');
        }
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function destroy($id)
    {
        $this->userModel->find($id)->delete();

        return redirect()->back()->with('message','Success delete user');
    }
}
