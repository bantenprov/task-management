<?php

namespace App\Http\Controllers\Auth;

use App\User;
use App\Http\Controllers\Controller;
use Illuminate\Support\Facades\Validator;
use Illuminate\Http\Request;
use Illuminate\Foundation\Auth\RegistersUsers;
use Illuminate\Auth\Events\Registered;

class RegisterController extends Controller
{
    /*
    |--------------------------------------------------------------------------
    | Register Controller
    |--------------------------------------------------------------------------
    |
    | This controller handles the registration of new users as well as their
    | validation and creation. By default this controller uses a trait to
    | provide this functionality without requiring any additional code.
    |
    */

    use RegistersUsers;

    public function showRegistrationForm()
    {
        if(env('REGISTRATION')){
            return view('register');
        }else{
            return redirect()->back();
        }
        
    }

    /**
     * Where to redirect users after registration.
     *
     * @var string
     */
    protected $redirectTo = '/task-management';

    /**
     * Create a new controller instance.
     *
     * @return void
     */
    public function __construct()
    {
        $this->middleware('guest');
    }

    /**
     * Get a validator for an incoming registration request.
     *
     * @param  array  $data
     * @return \Illuminate\Contracts\Validation\Validator
     */
    protected function validator(array $data)
    {               
        return Validator::make($data, [
            'name' => 'required|string|max:255',            
            'email' => 'required|string|email|max:255|unique:users',            
            'terms' => 'required'
        ]);
        
    }

    /**
     * Create a new user instance after a valid registration.
     *
     * @param  array  $data
     * @return User
     */
    protected function create(array $data)
    {
           
        


        $user = User::create([
            'name' => $data['name'],
            'email' => $data['email'],
            'password' => bcrypt($data['password']),
        ]);

        return $user->attachRole(env('DEFAULT_ROLE_USER'));
    }

    public function register(Request $request)
    {    
        $link = 'http://192.168.12.11:8900/login';
        $email = $request->email;
        $name = $request->name;
        $password = str_random(10);

        if(!env('REGISTRATION')){            
            return redirect()->back();
        }

        $this->validator($request->all())->validate();        
        
        event(new Registered($user = $this->create([
            'name' => $request->name,
            'email' => $request->email,
            'password' => $password
        ])));        

        
        \Mail::send('emails.verify-email', ['link' => $link, 'email' => $email,'name' => $name, 'password' => $password], function ($message) use ($email)
        {

            $message->from('verify.account@task-management.local', 'Task Management');
            $message->subject('Verify account');
            $message->to($email);

        });

        
        return redirect()->back()->with('message','Check email to get password for login');

    }    
}
